{"version":3,"sources":["action.js","fetchQuote.js","reducer.js","img/trump.png","quote.jsx","App.js","reportWebVitals.js","index.js"],"names":["GET_RANDOM_QUOTE","GET_RANDOM_QUOTE_SUCCESS","GET_RANDOM_QUOTE_ERROR","fetchQuote","dispatch","type","fetch","then","res","json","error","quote","date","value","appeared_at","catch","getRandomQuoteError","initialState","pending","getRandomQuote","state","getQuoteDate","getRandomQuotePending","Quote","this","props","className","style","paddingBottom","onClick","position","top","left","transform","loading","fontStyle","fontSize","bottom","right","margin","padding","fontWeight","moment","format","class","paddingTop","alt","src","trumpImage","Component","connect","bindActionCreators","fetchQuoteAction","App","textAlign","textTransform","letterSpacing","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","middlewares","thunk","store","createStore","action","console","log","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d2cb9d4.chunk.js","sourcesContent":["export const GET_RANDOM_QUOTE = 'GET_RANDOM_QUOTE';\r\nexport const GET_RANDOM_QUOTE_SUCCESS = 'GET_RANDOM_QUOTE_SUCCESS';\r\nexport const GET_RANDOM_QUOTE_ERROR = 'GET_RANDOM_QUOTE_ERROR';\r\n\r\nexport function getRandomQuote() {\r\n    return {\r\n        type: GET_RANDOM_QUOTE\r\n    }\r\n}\r\n\r\nexport function getRandomQuoteSuccess(quote, date) {\r\n    return {\r\n        type: GET_RANDOM_QUOTE_SUCCESS,\r\n        quote: quote,\r\n        date: date\r\n    }\r\n}\r\n\r\nexport function getRandomQuoteError(error) {\r\n    return {\r\n        type: GET_RANDOM_QUOTE_ERROR,\r\n        error: error\r\n    }\r\n}","import {getRandomQuote, \r\ngetRandomQuoteSuccess,\r\ngetRandomQuoteError} from './action'\r\n\r\nfunction fetchQuote() {\r\n    return dispatch => {\r\n        dispatch(getRandomQuote());\r\n        fetch('https://tronalddump.io/random/quote')\r\n        .then(res => res.json())    \r\n        .then(res => {\r\n            if(res.error) {\r\n                throw(res.error);\r\n            }\r\n            dispatch(getRandomQuoteSuccess(res.value, res.appeared_at));\r\n            return res.value;\r\n        })\r\n        .catch(error => {\r\n            dispatch(getRandomQuoteError(error));\r\n        })\r\n    }\r\n}\r\n\r\nexport default fetchQuote;","import {GET_RANDOM_QUOTE,\r\n    GET_RANDOM_QUOTE_SUCCESS,\r\n    GET_RANDOM_QUOTE_ERROR} from './action'\r\n\r\nexport const initialState = {\r\n    pending: false,\r\n    quote: \"\",\r\n    date: \"\",\r\n    error: null\r\n}\r\n\r\nexport function quoteReducer(state = initialState, action) {\r\n    console.log(\"REDUCER: \", action);\r\n    switch(action.type) {\r\n        case GET_RANDOM_QUOTE: \r\n            return {\r\n                ...state,\r\n                pending: true\r\n            }\r\n        case GET_RANDOM_QUOTE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                pending: false,\r\n                quote: action.quote,\r\n                date: action.date\r\n            }\r\n        case GET_RANDOM_QUOTE_ERROR:\r\n            return {\r\n                ...state,\r\n                pending: false,\r\n                error: action.error\r\n            }\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nexport const getRandomQuote = state => state.quote;\r\nexport const getQuoteDate = state => state.date;\r\nexport const getRandomQuotePending = state => state.pending;\r\nexport const getRandomQuoteError = state => state.error;","export default __webpack_public_path__ + \"static/media/trump.f2f6e8fe.png\";","import React, { Component } from 'react';\r\nimport fetchQuoteAction from './fetchQuote';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { getRandomQuoteError, getRandomQuote, getRandomQuotePending, getQuoteDate } from './reducer'\r\nimport trumpImage from \"./img/trump.png\"\r\nimport SyncLoader from \"react-spinners/SyncLoader\"\r\nimport moment from 'moment'\r\n\r\nclass Quote extends Component {\r\n    componentWillMount() {\r\n        const {fetchQuote} = this.props;\r\n        fetchQuote();\r\n    }\r\n\r\n    shouldComponentRender() {\r\n        const {pending} = this.props;\r\n        if(pending === false) return false;\r\n        return true;\r\n    }\r\n  \r\n    render() {\r\n        const {quote, pending, date} = this.props;\r\n    return (\r\n        \r\n        <div className=\"box\" style={{paddingBottom: \"0px\"}} onClick={() => this.props.fetchQuote()}>\r\n            <div style={{position: \"absolute\", top: \"50%\", left: \"50%\", transform: \"translate(-50%, -50%)\"}}> \r\n                <SyncLoader loading={pending}></SyncLoader>\r\n            </div>\r\n            <p style={{fontStyle: \"italic\", fontSize: \"18px\"}}>\r\n                {!pending && (quote ? \"\\\"\"+quote+\"\\\"\" : \"nop\")} \r\n            </p>\r\n            <h5 \r\n                style={{position: \"absolute\", bottom:\"5px\", right:\"10px\", margin:\"0\", padding:\"5px 3px\", fontWeight: \"bold\", fontSize: \"12px\"}}>\r\n                {!pending && (date ? moment(date).format('MM/DD/YYYY') : \"--/--/----\")} \r\n            </h5>\r\n            <figure class=\"image is-128x128\" >\r\n                <img style={{paddingTop: \"32px\"}} alt=\"trumpface\" src={trumpImage} /> \r\n            </figure>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    error: getRandomQuoteError(state),\r\n    quote: getRandomQuote(state),\r\n    pending: getRandomQuotePending(state),\r\n    date: getQuoteDate(state),\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({\r\n    fetchQuote: fetchQuoteAction\r\n}, dispatch)\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Quote);\r\n\r\n","import './App.css';\r\nimport Quote from './quote';\r\n\r\nfunction App() {\r\n  return (\r\n    <div class=\"section\">\r\n      <div class=\"container\">\r\n        <h1 class=\"title\" style={{ textAlign: 'center', textTransform: 'uppercase', letterSpacing: '2px' }}>\r\n          Tronaldihno\r\n        </h1>\r\n        <Quote />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bulma/css/bulma.css'\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { applyMiddleware, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {quoteReducer} from './reducer';\r\nimport {initialState} from './reducer';\r\nimport { Provider } from 'react-redux';\r\n\r\nconst middlewares = [thunk];\r\n\r\nconst store = createStore(quoteReducer, initialState, applyMiddleware(...middlewares));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}> \r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}